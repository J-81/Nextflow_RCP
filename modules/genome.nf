/*
 * Processes related to genome and annotations
 */

process BUILD_STAR {
  conda "${baseDir}/envs/star.yml"
  label 'maxCPU'

  input:
    tuple path(genomeFasta), path(genomeGtf)
  output:
    path("STAR_REF")
  script:
    """
STAR --runThreadN ${task.cpus} \
--runMode genomeGenerate \
--limitGenomeGenerateRAM 10000000000 \
--genomeSAindexNbases 14 \
--genomeDir STAR_REF \
--genomeFastaFiles ${ genomeFasta } \
--sjdbGTFfile ${ genomeGtf } \
--sjdbOverhang 149
    """

}

/*
 * Aligned reads to both the genome and transciptome generated by STAR
 */


process ALIGN_STAR {
  conda "${baseDir}/envs/star.yml"
  label 'maxCPU'

  input:
    tuple val(sampleID), path(forward_read), path(reverse_read), path(STAR_INDEX_DIR)
  output:
    tuple val(sampleID), \
          path("${ sampleID }Aligned.sortedByCoord.out.bam"), emit: genomeMapping
    tuple val(sampleID), \
          path("${ sampleID }Aligned.toTranscriptome.out.bam"), emit: transcriptomeMapping
  script:
    """
    STAR --twopassMode Basic \
    --limitBAMsortRAM 65000000000 \
    --outFilterType BySJout \
    --outSAMunmapped Within \
    --genomeDir ${ STAR_INDEX_DIR } \
    --outSAMattributes NH HI AS NM MD MC \
    --outFilterMismatchNoverReadLmax 0.04 \
    --outFilterMismatchNmax 999 \
    --outFilterMultimapNmax 20 \
    --alignIntronMin 20 \
    --alignSJoverhangMin 8 \
    --alignMatesGapMax 1000000 \
    --alignIntronMax 1000000 \
    --alignSJDBoverhangMin 1 \
    --sjdbScore 1 \
    --outSAMtype BAM SortedByCoordinate \
    --runThreadN ${ task.cpus } \
    --readFilesCommand zcat \
    --quantMode TranscriptomeSAM \
    --outFileNamePrefix ${ sampleID } \
    --readFilesIn ${ forward_read } ${ reverse_read }
    """

}

process BUILD_RSEM {
  conda "${baseDir}/envs/rsem.yml"

  input:
    tuple path(genomeFasta), path(genomeGtf)
  output:
    path("RSEM_REF")
  script:
    """
    mkdir RSEM_REF
    rsem-prepare-reference --gtf $genomeGtf $genomeFasta RSEM_REF/
    """

}

process COUNT_ALIGNED {
  conda "${baseDir}/envs/rsem.yml"

  input:
    tuple val(sampleID), path(transcriptomeMapping), path(RSEM_REF)
  output:
    tuple val(sampleID), path("${ sampleID }.genes.results"), emit: countsPerGene
    tuple val(sampleID), path("${ sampleID }.isoforms.results"), emit: countsPerIsoform
    tuple val(sampleID), path("${ sampleID }.stat"), emit: stats
  script:
    """
    rsem-calculate-expression --num-threads $task.cpus \
      --paired-end \
      --bam \
      --alignments \
      --no-bam-output \
      --estimate-rspd \
      --seed 12345 \
      --strandedness reverse \
      $transcriptomeMapping \
      $RSEM_REF/ \
      $sampleID
    """

}
